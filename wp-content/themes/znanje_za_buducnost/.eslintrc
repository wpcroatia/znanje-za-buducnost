{
  "root": true,
  "parser": "babel-eslint",
  "extends": [
    "wordpress",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:jest/recommended",
    "@infinumjs"
  ],
  "env": {
    "browser": true,
    "es6": true,
    "node": true,
    "mocha": true,
    "jest/globals": true
  },
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "globals": {
    "wp": true,
    "wpApiSettings": true,
    "window": true,
    "document": true,
    "$": true
  },
  "plugins": ["react", "jsx-a11y", "jest"],
  "settings": {
    "import/core-modules": [
      "@wordpress/components",
      "@wordpress/compose",
      "@wordpress/blocks",
      "@wordpress/element",
      "@wordpress/editor",
      "@wordpress/date",
      "@wordpress/data",
      "@wordpress/i18n",
      "@wordpress/keycodes",
      "@wordpress/viewport",
      "@wordpress/blob",
      "@wordpress/url",
      "@wordpress/apiFetch",
      "react",
      "react-dom",
      "tinyMCE",
      "tinymce",
      "backbone",
      "lodash",
      "moment",
      "ga",
      "gtag",
      "jquery"
     ],
    "react": {
      "pragma": "wp"
    }
  },
  "rules": {
    "allowImportExportEverywhere": true,
      "yoda": [
        "error",
        "never",
        {
          "exceptRange": true
        }
        ],
        "import/prefer-default-export": 0,
        "object-curly-spacing": [2, "always"],
        "no-duplicate-imports": 2,
        "no-mixed-operators": 1,
        "no-unsafe-negation": 1,
        "no-useless-computed-key": 2,
        "no-useless-return": 2,
        "arrow-body-style": 0,
        "jsx-a11y/media-has-caption": 0,
        "jsx-a11y/no-noninteractive-tabindex": 0,
        "jsx-a11y/role-has-required-aria-props": 0,
        "jsx-a11y/label-has-associated-control": [ "error", {
          "required": {
            "some": [ "nesting", "id"  ]
          }
        }],
        "jsx-a11y/label-has-for": [ "error", {
          "required": {
            "some": [ "nesting", "id"  ]
          }
        }],
        "jsx-quotes": 1,
        "react/display-name": 0,
        "react/jsx-curly-spacing": [
          2,
          {
            "when": "never",
            "children": true
          }
        ],
        "react/jsx-equals-spacing": [2, "never"],
        "react/jsx-indent": [
          2,
          2
        ],
        "react/jsx-indent-props": [
          2,
          2
        ],
        "react/jsx-key": 2,
        "react/jsx-tag-spacing": 2,
        "react/no-children-prop": 0,
        "react/no-find-dom-node": 1,
        "react/prop-types": 0,
        "no-restricted-syntax": [
          2,
          {
            "selector": "ImportDeclaration[source.value=/^@wordpress\\u002F.+\\u002F/]",
            "message": "Path access on WordPress dependencies is not allowed."
          },
          {
            "selector": "ImportDeclaration[source.value=/^blocks$/]",
            "message": "Use @wordpress/blocks as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^components$/]",
            "message": "Use @wordpress/components as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^date$/]",
            "message": "Use @wordpress/date as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^editor$/]",
            "message": "Use @wordpress/editor as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^element$/]",
            "message": "Use @wordpress/element as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^i18n$/]",
            "message": "Use @wordpress/i18n as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^data$/]",
            "message": "Use @wordpress/data as import path instead."
          },
          {
            "selector": "ImportDeclaration[source.value=/^utils$/]",
            "message": "Use @wordpress/utils as import path instead."
          },
          {
            "selector": "CallExpression[callee.name=/^__|_n|_x$/]:not([arguments.0.type=/^Literal|BinaryExpression$/])",
            "message": "Translate function arguments must be string literals."
          },
          {
            "selector": "CallExpression[callee.name=/^_n|_x$/]:not([arguments.1.type=/^Literal|BinaryExpression$/])",
            "message": "Translate function arguments must be string literals."
          },
          {
            "selector": "CallExpression[callee.name=_nx]:not([arguments.2.type=/^Literal|BinaryExpression$/])",
            "message": "Translate function arguments must be string literals."
          }
        ]
  }
}
